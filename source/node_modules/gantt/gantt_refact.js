class Gantt{

	constructor(args){
		this.height = args.height;
		this.width = args.width;
		this.warNames = args.warNames;
		this.warClasses = args.warClasses;
		this.container = args.container;
		this.tickFormat = args.tickFormat;
		this.margin = {top : 20, right : 240, bottom : 20, left : 10};
		this.rectTransform;
		this.keyFunction;
		this.axis_canvas;
		this.chart;
		this.xAxis;
		this.yAxis;
		this.div;
		this.gX;
		this.x;
		this.y;

		this.canvas = this.container.append("g");

		console.log("criado")
	}

	_initTimeDomain(data) {
		if(data === undefined || data.length < 1){
			this.timeDomainStart = d3.time.day.offset(new Date(), -3);
			this.timeDomainEnd = d3.time.hour.offset(new Date(), +3);
			return;
		}

		data.sort(function(a, b) {
			return a.endDate - b.endDate;
		});
		this.timeDomainEnd = data[data.length - 1].endDate;
		data.sort(function(a, b) {
			return a.startDate - b.startDate;
		});
		this.timeDomainStart = data[0].startDate;
	}

	_rectTransform(d, object) {
		return "translate(" + object.x(d.startDate) + "," + object.y(d.warName) + ")";
	}


	_initAxis() {
		this.x = d3.scaleTime().domain([ this.timeDomainStart, this.timeDomainEnd ]).range([ 0, this.width ]);
		this.y = d3.scaleBand().domain(this.warNames).range([ 0, this.height - this.margin.top - this.margin.bottom ]).padding(0.1);

		this.xAxis = d3.axisBottom().scale(this.x).tickFormat(d3.timeFormat(this.tickFormat))
		.tickSize(8).tickPadding(8);

		this.yAxis = d3.axisLeft().scale(this.y).tickSize(0);

		this.keyFunction = function(d) {
			return d.startDate + d.warName + d.endDate;
		};
	}

	_zoomed() {
		var event = d3.event.transform;
		console.log(event)
		this.chart.selectAll(".bar").attr("transform", event);

		this.chart.attr("clip-path", 'url(#clip-gantt)');

		this.chart.selectAll(".bar")
			.attr("x", function(d){ return x(d.startDate)})
			.attr("y", function(d){ return y(d.warName)});

		this.gX.call(this.xAxis.scale(d3.event.transform.rescaleX(this.x)));
	}


	display(data) {

		console.log(data)

		this._initTimeDomain(data);
		this._initAxis();

		console.log("display")

		var svg = this.canvas;

		if(svg.empty()){
			svg = d3.select("body")
			.append("svg")
			.attr("class", "chart")
			.attr("width", this.width + this.margin.left + this.margin.right)
			.attr("height", this.height + this.margin.top + this.margin.bottom)
		}

		this.axis_canvas = svg.append("g")
			.attr("class", "gantt-axis")
			.attr("transform", "translate(" + this.margin.left + ", " + this.margin.top + ")");

		svg.append("defs").append("clipPath")
			.attr("id", "clip-gantt")
			.append("rect")
			.attr("width", this.width)
			.attr("height", this.height - this.margin.top - this.margin.bottom);

		this.chart = svg.append("g")
			.attr("class", "gantt-chart")
			.attr("width", this.width - this.margin.left)
			.attr("height", this.height - this.margin.top)
			.attr("transform", "translate(" + this.margin.left + ", " + this.margin.top + ")"); 

		var zoom = d3.zoom()
			.scaleExtent([1, 40])
			.on("zoom", this._zoomed);

		var that = this;

		this.chart.selectAll(".chart")
			.data(data, this.keyFunction).enter()
			.append("rect")
			.attr("rx", 5)
			.attr("ry", 5)
			.on("mouseover", function(d) {
				that.div = new Wordcloud({war_id: d.id, x: 0, y: 0, width: 200, height: 100, container: that.canvas, id: "wc"});
				
				that.div.canvas.transition()
					.duration(200)
					.style("opacity", .9)
					.attr("transform", "translate("+(d3.event.pageX)+","+(d3.event.pageY - 28)+")")
				})
			.on("mouseout", function(d) {
				that.div.canvas.transition()
				.duration(800)
				.style("opacity", 0)
				.remove();
				})
			.on("click", function(d){ clickedWar = d.warName;})
			.attr("class", "bar")
			.attr("id", function(d){return d.warName}) 
			.attr("y", 0)
			.attr("transform", function(d){ return that._rectTransform(d, that);} )
			.attr("height", function(d) { return that.y.bandwidth(); })
			.attr("width", function(d) { 
				return (that.x(d.endDate) - that.x(d.startDate)); 
				});

		this.gX = this.axis_canvas
			.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0, " + (that.height - that.margin.top - that.margin.bottom) + ")")
			.transition()
			.call(this.xAxis);

		svg.call(zoom);
    }
}