class Gantt{

	constructor(args){
		this.height = args.height;
		this.width = args.width;
		this.warClasses = args.warClasses;
		this.container = args.container;
		this.tickFormat = args.tickFormat;
		this.x = args.x;
		this.y = args.y;
		this.margin = {top : 5, right : 0, bottom : 30, left : 10};
		this.rectTransform;
		this.keyFunction;
		this.axis_canvas;
		this.chart;
		this.xAxis;
		this.yAxis;
		this.div;
		this.gX;
		this.xScale;
		this.yScale;

		console.log(this.warClasses)
		console.log(this.x)
		console.log(this.y)

		this.canvas = this.container.append("g")
			.attr("transform", "translate(" + (this.x + this.margin.left) + "," + (this.y + this.margin.top) + ")");

		this.canvas.append("rect")
			.attr("width", this.width)
			.attr("height", this.height - (this.margin.top + this.margin.bottom))
			.attr("fill", "white")
			.attr("stroke", "black")
			.attr("stroke-width", 0.3);
	}

	_initTimeDomain(data) {
		if(data === undefined || data.length < 1){
			this.timeDomainStart = d3.time.day.offset(new Date(), -3);
			this.timeDomainEnd = d3.time.hour.offset(new Date(), +3);
			return;
		}

		data.sort(function(a, b) {
			return a.end_date - b.end_date;
		});
		this.timeDomainEnd = data[data.length - 1].end_date;
		data.sort(function(a, b) {
			return a.start_date - b.start_date;
		});
		this.timeDomainStart = data[0].start_date;
	}

	_rectTransform(d, object) {
		return "translate(" + object.xScale(d.start_date) + "," + object.yScale(d.class) + ")";
	}


	_initAxis() {
		this.xScale = d3.scaleTime().domain([ this.timeDomainStart, this.timeDomainEnd ]).range([ 0, this.width ]);
		this.yScale = d3.scaleBand().domain(this.warClasses).range([ 0, this.height - this.margin.top - this.margin.bottom ]).padding(0.1);

		this.xAxis = d3.axisBottom(this.xScale).tickFormat(d3.timeFormat(this.tickFormat))
		.tickSize(8).tickPadding(8);

		this.yAxis = d3.axisLeft().scale(this.yScale).tickSize(0);

		this.keyFunction = function(d) {
			return d.start_date + d.class + d.end_date;
		};
	}

	_zoomed() {
		
		var event = d3.event.transform;
		var that = this;
		// console.log(event)
		this.elements.attr("transform", event.translate(0, -event.y/event.k));

		this.chart.attr("clip-path", 'url(#clip-gantt)');

		this.gX.call(this.xAxis.scale(d3.event.transform.rescaleX(this.xScale)));

		this.elements
			.attr("rx", 2/event.k)
			.attr("ry", 2/event.k)
			.attr("height", function(d) { return that.yScale.bandwidth() / event.k; })
			.attr("y", function(d){ return that.yScale(d.class) / event.k; });

		for (var key in this.selected) {
			this.selected[key].canvas.remove();
			delete this.selected[key];
		}
	}


	display(data) {

		var that = this;

		this._initTimeDomain(data);
		this._initAxis();

		this.div = null;
		this.selected = [];

		var svg = this.canvas;

		if(svg.empty()){
			svg = d3.select("body")
			.append("svg")
			.attr("class", "chart")
			.attr("width", this.width + this.margin.left + this.margin.right)
			.attr("height", this.height + this.margin.top + this.margin.bottom);
		}

		this.axis_canvas = svg.append("g")
			.attr("class", "gantt-axis")

		svg.append("defs").append("clipPath")
			.attr("id", "clip-gantt")
			.append("rect")
			.attr("width", this.width)
			.attr("height", this.height - this.margin.top - this.margin.bottom);

		this.chart = svg.append("g")
			.attr("class", "gantt-chart")
			.attr("width", this.width - this.margin.left)
			.attr("height", this.height - this.margin.top);

		var zoom = d3.zoom()
			.scaleExtent([0.8, 300])
			// .translateExtent([[0, 0], [this.width+this.x, this.height+this.y]])
			.on("zoom", function() {that._zoomed();});

		this.elements = this.chart.selectAll("rect")
			.data(data/*, this.keyFunction*/);

		this.elements.exit()
			.remove();

		this.elements = this.elements.enter()
			.append("rect")
			.merge(this.elements)
			.attr("rx", 2)
			.attr("ry", 2)
			.on("mouseover", function(d) {
				if (!that.selected.hasOwnProperty(d.war_id)) {
					that.div = new Wordcloud({war_id: d.war_id, x: 0, y: 0, width: 200, height: 100, container: that.canvas, id: "wc"});
					
					that.div.canvas.transition()
						.duration(0)
						.style("opacity", .9)
						.attr("transform", "translate("+(d3.event.pageX - that.x)+","+(d3.event.pageY - that.y - 28)+")");
						//.attr("transform", "translate("+(d3.event.pageX)+","+(d3.event.pageY - 28)+")");
				}
			})
			.on("mouseout", function(d) {
				if (that.div != null) {
					that.div.canvas.transition()
						.duration(500)
						.style("opacity", 0)
						.remove();
					that.div = null;
				}
			})
			// .on("click", function(d){ clickedWar = d.class;})
			.attr("class", "bar")
			.attr("id", function(d){return d.class}) 
			.attr("x", function(d) { return that.xScale(d.start_date); })
			.attr("y", function(d) { return that.yScale(d.class); })
			.attr("height", function(d) { return that.yScale.bandwidth(); })
			.attr("width", function(d) { return (that.xScale(d.end_date) - that.xScale(d.start_date)); });

		this.gX = this.axis_canvas
			.append("g")
			.attr("class", "x axis")
			.attr("transform", "translate(0, " + (that.height - that.margin.top - that.margin.bottom) + ")")
			// .transition()
			.call(this.xAxis);

		svg.call(zoom);

		this.setClick();
    }

    setData(data) {

    	var that = this;

    	this.elements = this.chart.selectAll("rect")
			.data(data/*, this.keyFunction*/);

		this.elements.exit()
			.remove();

		this.elements = this.elements.enter()
			.append("rect")
			.merge(this.elements)
			.attr("rx", 2)
			.attr("ry", 2)
			// .attr("class", "bar")
			// .attr("id", function(d){return d.class}) 
			.attr("x", function(d) { return that.xScale(d.start_date); })
			.attr("y", function(d) { return that.yScale(d.class); })
			.attr("height", function(d) { return that.yScale.bandwidth(); })
			.attr("width", function(d) { return (that.xScale(d.end_date) - that.xScale(d.start_date)); });
    }

	setClick() {

		var that = this;

		this.elements.on("click", function(d) {
			if (that.selected.hasOwnProperty(d.war_id)) {
				that.selected[d.war_id].canvas.transition()
					.duration(500)
					.style("opacity", 0)
					.remove();
				delete that.selected[d.war_id];
			}
			else if (that.div != null) {
				that.selected[d.war_id] = that.div;
				that.div = null;
			}
		});
	}
}