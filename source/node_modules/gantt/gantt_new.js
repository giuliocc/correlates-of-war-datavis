class Gantt {

	constructor(arg) {

		this.id = arg.id;
		this.container = arg.container;

		this.x = arg.x;
		this.y = arg.y;
		this.width = arg.width;
		this.height = arg.height;

		this.canvas = this.container.append("g");
		this.canvas.attr("transform", "translate(" + this.x + "," + this.y + ")");

		this.param = {
			margin: {left: 50, bottom: 20},
			extent: {zoom: [1, 300]},
			tooltip: {x: 0, y: -30, width: 200, height: 100},
			elements: {rx: 2, ry: 2},
		};

		this.classes = {
			elements: "",
			axes: {x: "axis_x", y: "axis_y"},
			tooltip: "label label-primary",
			hide: "hidden"
		};

		this.setMargin();
		this.setScales();

		this.setDataset(arg.dataset);
		this.setAxes();

		this.setZoom();
		this.setTooltip();

		this.setClipPath();
	}

	setMargin() {

		this.height -= this.param.margin.bottom;

		this.canvas.append("rect")
			.attr("width", this.width)
			.attr("height", this.height)
			.attr("fill", "white")
			.attr("stroke", "black")
			.attr("stroke-width", 0.3);

		this.clip = this.canvas.append("g");
		this.view = this.clip.append("g");
	}

	setScales() {

		this.x_scale = d3.scaleTime().range([0, this.width]);
		this.y_scale = d3.scaleBand().range([0, this.height]);

		// this.color_scale = d3.scaleLinear().range(this.param.elements.color);
	}

	setDataset(data) {

		var that = this;

		this.dataset = data;

		this.elements = this.view.selectAll(".chart")
			.data(this.dataset);

		this.elements.exit()
			.remove();

		this.elements = this.elements.enter()
			.append("rect")
			.merge(this.elements)
			.attr("x", function(d) { return that.x_scale(d.start_date); })
			.attr("y", function(d) { return that.y_scale(d.class); })
			.attr("width", function(d) { return (that.x_scale(d.end_date) - that.x_scale(d.start_date)); })
			.attr("height", function(d) { return that.y_scale.bandwidth(); })
			.attr("rx", this.param.elements.rx)
			.attr("ry", this.param.elements.ry);
	}

	setAxes() {

		this.x_axis = d3.axisBottom(this.x_scale);

		this.x_axis_group = this.canvas.append("g")
			.attr("transform", "translate(0," + this.height + ")")
			.attr("class", this.classes.axes.x);

		this.x_axis(this.x_axis_group);
	}

	setZoom() {

		var that = this;

		this.zoom = d3.zoom()
			.scaleExtent(this.param.extent.zoom)
			.on("zoom", function() {

				var transf = d3.event.transform;

				that.view.attr("transform", transf.translate(0, transf.invertY(0)));
				that.x_axis_group.call(that.x_axis.scale(transf.rescaleX(that.x_scale)));
				that.elements
					.attr("y", function(d) { return that.y_scale.bandwidth()/transf.k; })
					.attr("height", function(d) { return that.y_scale(d.class)/transf.k; })
					.attr("rx", this.param.elements.rx/transf.k)
					.attr("ry", this.param.elements.ry/transf.k);
			});

		this.zoom(this.canvas);
	}

	setTooltip() {

		var that = this;
		
		this.tooltip = null;
		this.selected = {};

		this.elements
			.on("mousemove", function(d) {
				if (!that.selected.hasOwnProperty(d.war_id)) {
					that.tooltip = new Wordcloud({war_id: d.war_id, x: 0, y: 0, width: that.param.tooltip.width, height: that.param.tooltip.height, container: that.view, id: "wc"});
					that.tooltip.canvas.transition()
						.duration(0)
						.attr("transform", "translate("+(d3.event.pageX + that.param.tooltip.x)+","+(d3.event.pageY + that.param.tooltip.y)+")")
						.attr("class", that.classes.tooltip);
				}
			})
			.on("mouseout", function(d) {
				if (that.tooltip != null) {
					that.tooltip.transition()
						.duration(500)
						.style("opacity", 0)
						.remove();
					that.tooltip = null;
				}
			});
	}

	setClick() {

		var that = this;

		this.elements.on("click", function(d) {
			if (that.selected.hasOwnProperty(d.war_id)) {
				that.selected[d.war_id].transition()
					.duration(500)
					.style("opacity", 0)
					.remove();
				delete that.selected[d.war_id];
			}
			else if (that.tooltip != null) {
				that.selected[d.war_id] = that.tooltip;
				that.tooltip = null;
			}
		});
	}

	setClipPath() {

		this.clip.attr("clip-path", "url(#clip-gantt)");

		this.container.append("defs").append("clipPath")
			.attr("id", "clip-gantt")
			.append("rect")
			.attr("opacity", 0)
			.attr("width", this.width)
			.attr("height", this.height);
	}
}