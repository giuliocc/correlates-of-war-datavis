class Scatterplot {

	// {
	// 	name:	nome da guerra
	// 	x:		duração
	// 	y:		vidas perdidas
	// 	value:	
	// 	class:	tipo de guerra?
	// }

	constructor(arg) {

		this.id = arg.id;
		this.container = arg.container;

		this.x = arg.x;
		this.y = arg.y;
		this.width = arg.width;
		this.height = arg.height;

		this.canvas = this.container.append("g");
		this.canvas.attr("transform", "translate(" + this.x + "," + this.y + ")");

		this.param = {
			margin: {left: 50, bottom: 20},
			extent: {zoom: [0.2, 300], translate: [[0, 0], [this.width+this.x, this.height+this.y]]},
			tooltip: {x: 5, y: -20, on: 400, off: 100},
			elements: {color: ["lightgreen", "darkgreen"], radius: [3, 9], margin: {x: 0, y: 0}},
		};

		this.classes = {
			elements: "",
			axes: {x: "axis_x", y: "axis_y"},
			tooltip: "label label-primary",
			hide: "hidden"
		};

		this.setMargin();
		this.setScales();

		this.setDataset(arg.dataset);
		this.setAxes();

		this.setZoom();
		this.setTooltip();

		this.setClipPath();
		
		// this.setBrush();
	}

	setMargin() {

		this.width -= this.param.margin.left;
		this.height -= this.param.margin.bottom;

		this.canvas.append("rect")
			.attr("width", this.width)
			.attr("height", this.height)
			.attr("fill", "white")
			.attr("stroke", "black")
			.attr("stroke-width", 0.3);

		this.clip = this.canvas.append("g");
		this.view = this.clip.append("g");

		this.canvas.attr("transform", "translate(" + (this.x + this.param.margin.left) + "," + this.y + ")");
	}

	setScales() {

		this.x_scale = d3.scaleLinear().range([0, this.width]);
		this.y_scale = d3.scaleLinear().range([this.height, 0]);

		this.color_scale = d3.scaleLinear().range(this.param.elements.color);
		this.size_scale = d3.scaleLinear().range(this.param.elements.radius);
	}

	setDataset(data) {

		var that = this;

		this.dataset = data;

		this.x_scale.domain([0, d3.max(this.dataset, function(d) { return (d.end_date - d.start_date) / (3600*24*1000); })]);
		this.y_scale.domain([0, d3.max(this.dataset, function(d) { return d.total_deaths; })]);

		this.color_scale.domain(d3.extent(this.dataset, function(d) { return d.total_participants; }));
		this.size_scale.domain(d3.extent(this.dataset, function(d) { return d.total_participants; }));

		this.elements = this.view.selectAll("circle")
			.data(this.dataset);

		this.elements.exit()
			.remove();

		this.elements = this.elements.enter()
			.append("circle")
			.merge(this.elements)
			.attr("cx", function(d) { return that.x_scale( (d.end_date - d.start_date) / (3600*24*1000) ); })
			.attr("cy", function(d) { return that.y_scale(d.total_deaths); })
			.attr("r", function(d) { return that.size_scale(d.total_participants); })
			.attr("fill", function(d) { return that.color_scale(d.total_participants); })
			.attr("class", this.classes.elements);
	}

	setData(data) {

		var that = this;

		this.elements = this.view.selectAll("circle")
			.data(data);

		this.elements.exit()
			.remove();

		this.elements = this.elements.enter()
			.append("circle")
			.merge(this.elements)
			.attr("cx", function(d) { return that.x_scale( (d.end_date - d.start_date) / (3600*24*1000) ); })
			.attr("cy", function(d) { return that.y_scale(d.total_deaths); })
			.attr("r", function(d) { return that.size_scale(d.total_participants); })
			.attr("fill", function(d) { return that.color_scale(d.total_participants); })
			.attr("class", this.classes.elements);
	}

	setAxes() {

		this.x_axis = d3.axisBottom(this.x_scale);
		this.y_axis = d3.axisLeft(this.y_scale);

		this.x_axis_group = this.canvas.append("g")
			.attr("transform", "translate(0," + this.height + ")")
			.attr("class", this.classes.axes.x);

		this.y_axis_group = this.canvas.append("g")
			.attr("class", this.classes.axes.y);

		this.x_axis(this.x_axis_group);
		this.y_axis(this.y_axis_group);
	}

	setZoom() {

		var that = this;
		
		this.zoom = d3.zoom()
			.scaleExtent(this.param.extent.zoom)
			// .translateExtent(this.param.extent.translate)
			.on("zoom", function() {
				
				that.view.attr("transform", d3.event.transform);
				that.x_axis_group.call(that.x_axis.scale(d3.event.transform.rescaleX(that.x_scale)));
				that.y_axis_group.call(that.y_axis.scale(d3.event.transform.rescaleY(that.y_scale)));

				that.elements.attr("r", function(d) { return that.size_scale(d.total_participants)/d3.event.transform.k; });
			});

		this.zoom(this.canvas);
	}

	setTooltip() {

		var that = this;

		this.tooltip = d3.select("body").append("div")
			.style("position", "absolute")
			.attr("class", this.classes.hide);

		this.elements
			.on("mouseover", function(d) {
				that.tooltip.transition()
					.duration(that.param.tooltip.on);
					
				that.tooltip.html(d.war_name)
					.style("left", (d3.event.pageX + that.param.tooltip.x) + "px")
					.style("top", (d3.event.pageY + that.param.tooltip.y) + "px")
					.attr("class", that.classes.tooltip);
			})
			.on("mouseout", function(d) {
				that.tooltip.transition()
					.duration(that.param.tooltip.off)
					.attr("class", that.classes.hide);
			});
	}

	setClipPath() {

		this.clip.attr("clip-path", "url(#clip-scat)");

		this.container.append("defs").append("clipPath")
	        .attr("id", "clip-scat")
	        .append("rect")
	        .attr("opacity", 0)
	        .attr("width", this.width)
	        .attr("height", this.height);
	}
}