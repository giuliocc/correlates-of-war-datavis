class GeoMap {

	constructor(arg) {

		this.id = arg.id;
		this.container = arg.container;

		this.x = arg.x;
		this.y = arg.y;
		this.width = arg.width;
		this.height = arg.height;

		this.color = d3.scaleOrdinal(d3.schemeCategory20b);

		this.canvas = this.container.append("g");
		this.canvas.attr("transform", "translate(" + this.x + "," + this.y + ")");

		this.param = {
			projection: {scale: [200]},
			zoom: {extent: [1/2, 8]},
			tooltip: {x: 5, y: -20, on: 400, off: 100},
			connector: {color: "black", stroke: 0.5}
		};

		this.classes = {
			elements: "",
			tooltip: "label label-success",
			hide: "hidden"
		};

		this.setProjection();
		this.setDataset(arg.dataset);

		this.setZoom();
		this.setTooltip();

		this.setClipPath();

		this.setConnection(arg.connect_data);
	}

	setProjection() {

		this.projection = d3.geoFahey()
			.translate([this.width/2, this.height/2])
			.scale(this.param.projection.scale);

		this.path = d3.geoPath()
			.projection(this.projection);
	}

	setDataset(data) {

		var that = this;

		this.dataset = data;

		this.elements = this.canvas.selectAll("path")
			.data(this.dataset.features);

		this.elements.exit()
			.remove();

		this.elements = this.elements.enter()
			.append("path")
			.merge(this.elements)
			.attr("d", this.path)
			.attr("fill", function(d) { return that.color(d.properties.COWCODE); })
			.attr("class", this.classes.elements);
	}

	setZoom() {

		var that = this;

		this.zoom = d3.zoom()
			.scaleExtent(this.param.zoom.extent)
			.on("zoom", function() {
				that.canvas.attr("transform", d3.event.transform);
			});

		this.zoom(this.container);
	}

	setTooltip() {

		var that = this;

		this.tooltip = d3.select("body").append("div")
			.style("position", "absolute")
			.attr("class", this.classes.hide);

		this.elements
			.on("mousemove", function(d) {
				that.tooltip.transition()
					.duration(that.param.tooltip.on);
					
				that.tooltip.html(d.properties.name)
					.style("left", (d3.event.pageX + that.param.tooltip.x) + "px")
					.style("top", (d3.event.pageY + that.param.tooltip.y) + "px")
					.attr("class", that.classes.tooltip);
			})
			.on("mouseout", function(d) {
				that.tooltip.transition()
					.duration(that.param.tooltip.off)
					.attr("class", that.classes.hide);
			});
	}

	setConnection(data) {

		var that = this;

		this.connect_data = data;

		this.selected = null;

		this.elements
			.on("click", function(d) {
				that.connect(d.properties);
			});
	}

	connect(sel_prop) {

		var that = this;

		this.selected = sel_prop.COWCODE;

		var enemies_coord = this.connect_data
			.filter(function(d) { return d.ccode == sel_prop.COWCODE; })	// get wars
			.map(function(d) {
				return that.connect_data
					.filter(function(e) {
						return (e.war_id == d.war_id) && (e.side != d.side);	// get enemies in wars
					})
					.map(function(e) { return e.ccode; });	// get enemies codes
			})
			.reduce(function(d, e) { return d.concat(e); }, [])		// group enemies in one list
			.map(function(d) {
				return that.dataset.features
					.filter(function(e) {
						return (e.properties.COWCODE == d);	// get enemies in dataset
					})
					.map(function(e) { return that.projection([e.properties.CAPLONG, e.properties.CAPLAT]); })[0];	// get enemies capital coodinates
			});

		var orign = this.projection([sel_prop.CAPLONG, sel_prop.CAPLAT]);

		this.connectors = this.canvas.selectAll("line")
			.data(enemies_coord);

		this.connectors.exit()
			.remove();

		this.connectors.enter()
			.append("line")
			.merge(this.connectors)
			.attr("x1", orign[0])
			.attr("y1", orign[1])
			.attr("x2", function(d) { return d[0]; })
			.attr("y2", function(d) { return d[1]; })
			.attr("stroke", this.param.connector.color)
			.attr("stroke-width", this.param.connector.stroke);
	}

	setClipPath() {

		this.canvas.attr("clip-path", "url(#clip-gantt)");

		this.container.append("defs").append("clipPath")
	        .attr("id", "clip-gantt")
	        .append("rect")
	        .attr("opacity", 0)
	        .attr("width", this.width)
	        .attr("height", this.height);
	}

}